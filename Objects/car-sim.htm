<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\car-sim.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\car-sim.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Sun Mar 10 13:50:45 2024
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; vioInit &rArr; BSP_TSENSOR_Init &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18]">SVC_Handler</a>
 <LI><a href="#[1a]">PendSV_Handler</a>
 <LI><a href="#[1b]">SysTick_Handler</a>
 <LI><a href="#[bb]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b6]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b6]">osRtxErrorNotify</a><BR>
 <LI><a href="#[18f]">osRtxThreadListRoot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18f]">osRtxThreadListRoot</a><BR>
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[82]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">osRtxIdleThread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4b]">ADC3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from stm32l4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[30]">CAN1_RX0_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[31]">CAN1_RX1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[32]">CAN1_SCE_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2f]">CAN1_TX_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5c]">COMP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[59]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5a]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5b]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[46]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[29]">DMA1_Channel3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel6_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel7_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[55]">DMA2_Channel2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[56]">DMA2_Channel3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[57]">DMA2_Channel4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[58]">DMA2_Channel5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[60]">DMA2_Channel6_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[61]">DMA2_Channel7_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from stm32l4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[44]">EXTI15_10_IRQHandler</a> from stm32l4xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from stm32l4xx_it.o(.text.EXTI9_5_IRQHandler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[81]">EventRecorderDisable</a> from eventrecorder.o(.text.EventRecorderDisable) referenced from rtx_lib.o(.text.osRtxKernelBeforeInit)
 <LI><a href="#[80]">EventRecorderEnable</a> from eventrecorder.o(.text.EventRecorderEnable) referenced from eventrecorder.o(.text.EventRecorderInitialize)
 <LI><a href="#[80]">EventRecorderEnable</a> from eventrecorder.o(.text.EventRecorderEnable) referenced from rtx_lib.o(.text.osRtxKernelBeforeInit)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4c]">FMC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[6b]">FPU_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[70]">HAL_GPIO_EXTI_IRQHandler</a> from stm32l4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler) referenced from stm32l4xx_it.o(.text.EXTI9_5_IRQHandler)
 <LI><a href="#[74]">HAL_GPIO_Init</a> from stm32l4xx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from main.o(.text.main)
 <LI><a href="#[73]">HAL_GPIO_WritePin</a> from stm32l4xx_hal_gpio.o(.text.HAL_GPIO_WritePin) referenced from main.o(.text.main)
 <LI><a href="#[0]">HTS221_H_Init</a> from hts221.o(.text.HTS221_H_Init) referenced 2 times from hts221.o(.data.HTS221_H_Drv)
 <LI><a href="#[2]">HTS221_H_ReadHumidity</a> from hts221.o(.text.HTS221_H_ReadHumidity) referenced 2 times from hts221.o(.data.HTS221_H_Drv)
 <LI><a href="#[1]">HTS221_H_ReadID</a> from hts221.o(.text.HTS221_H_ReadID) referenced 2 times from hts221.o(.data.HTS221_H_Drv)
 <LI><a href="#[3]">HTS221_T_Init</a> from hts221.o(.text.HTS221_T_Init) referenced 2 times from hts221.o(.data.HTS221_T_Drv)
 <LI><a href="#[4]">HTS221_T_ReadTemp</a> from hts221.o(.text.HTS221_T_ReadTemp) referenced 2 times from hts221.o(.data.HTS221_T_Drv)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32l4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[65]">I2C3_ER_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[64]">I2C3_EV_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5]">LPS22HB_P_Init</a> from lps22hb.o(.text.LPS22HB_P_Init) referenced 2 times from lps22hb.o(.data.LPS22HB_P_Drv)
 <LI><a href="#[6]">LPS22HB_P_ReadID</a> from lps22hb.o(.text.LPS22HB_P_ReadID) referenced 2 times from lps22hb.o(.data.LPS22HB_P_Drv)
 <LI><a href="#[7]">LPS22HB_P_ReadPressure</a> from lps22hb.o(.text.LPS22HB_P_ReadPressure) referenced 2 times from lps22hb.o(.data.LPS22HB_P_Drv)
 <LI><a href="#[5d]">LPTIM1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5e]">LPTIM2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[62]">LPUART1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[9]">LSM6DSL_AccDeInit</a> from lsm6dsl.o(.text.LSM6DSL_AccDeInit) referenced 2 times from lsm6dsl.o(.data.Lsm6dslAccDrv)
 <LI><a href="#[8]">LSM6DSL_AccInit</a> from lsm6dsl.o(.text.LSM6DSL_AccInit) referenced 2 times from lsm6dsl.o(.data.Lsm6dslAccDrv)
 <LI><a href="#[b]">LSM6DSL_AccLowPower</a> from lsm6dsl.o(.text.LSM6DSL_AccLowPower) referenced 2 times from lsm6dsl.o(.data.Lsm6dslAccDrv)
 <LI><a href="#[a]">LSM6DSL_AccReadID</a> from lsm6dsl.o(.text.LSM6DSL_AccReadID) referenced 2 times from lsm6dsl.o(.data.Lsm6dslAccDrv)
 <LI><a href="#[c]">LSM6DSL_AccReadXYZ</a> from lsm6dsl.o(.text.LSM6DSL_AccReadXYZ) referenced 2 times from lsm6dsl.o(.data.Lsm6dslAccDrv)
 <LI><a href="#[e]">LSM6DSL_GyroDeInit</a> from lsm6dsl.o(.text.LSM6DSL_GyroDeInit) referenced 2 times from lsm6dsl.o(.data.Lsm6dslGyroDrv)
 <LI><a href="#[d]">LSM6DSL_GyroInit</a> from lsm6dsl.o(.text.LSM6DSL_GyroInit) referenced 2 times from lsm6dsl.o(.data.Lsm6dslGyroDrv)
 <LI><a href="#[10]">LSM6DSL_GyroLowPower</a> from lsm6dsl.o(.text.LSM6DSL_GyroLowPower) referenced 2 times from lsm6dsl.o(.data.Lsm6dslGyroDrv)
 <LI><a href="#[f]">LSM6DSL_GyroReadID</a> from lsm6dsl.o(.text.LSM6DSL_GyroReadID) referenced 2 times from lsm6dsl.o(.data.Lsm6dslGyroDrv)
 <LI><a href="#[11]">LSM6DSL_GyroReadXYZAngRate</a> from lsm6dsl.o(.text.LSM6DSL_GyroReadXYZAngRate) referenced 2 times from lsm6dsl.o(.data.Lsm6dslGyroDrv)
 <LI><a href="#[15]">MemManage_Handler</a> from stm32l4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from stm32l4xx_it.o(.text.NMI_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[5f]">OTG_FS_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1d]">PVD_PVM_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[63]">QUADSPI_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[6a]">RNG_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[45]">RTC_Alarm_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1f]">RTC_WKUP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[66]">SAI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[67]">SAI2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4d]">SDMMC1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[71]">SENSOR_IO_ReadMultiple</a> from stm32l475e_iot01.o(.text.SENSOR_IO_ReadMultiple) referenced from hts221.o(.text.HTS221_H_ReadHumidity)
 <LI><a href="#[71]">SENSOR_IO_ReadMultiple</a> from stm32l475e_iot01.o(.text.SENSOR_IO_ReadMultiple) referenced from hts221.o(.text.HTS221_T_ReadTemp)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4f]">SPI3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[68]">SWPMI1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[1b]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32l4xx.o(.text.SystemInit) referenced from startup_stm32l475xx.o(.text)
 <LI><a href="#[1e]">TAMP_STAMP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[35]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4e]">TIM5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[52]">TIM6_DAC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[53]">TIM7_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[47]">TIM8_BRK_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[4a]">TIM8_CC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[49]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[48]">TIM8_UP_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[69]">TSC_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[41]">USART1_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[43]">USART3_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from stm32l4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from startup_stm32l475xx.o(.text) referenced from startup_stm32l475xx.o(RESET)
 <LI><a href="#[6d]">__main</a> from __main.o(!!!main) referenced from startup_stm32l475xx.o(.text)
 <LI><a href="#[6f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6e]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[82]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[89]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[8a]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[8c]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[92]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[91]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[83]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[8b]">osThreadEntry</a> from rtx_thread.o(.text.osThreadEntry) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[90]">osTimerStart</a> from rtx_timer.o(.text.osTimerStart) referenced from timeline.o(.text.timeline_task_thread)
 <LI><a href="#[75]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[76]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[77]">svcRtxKernelGetSysTimerCount</a> from rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) referenced from rtx_kernel.o(.text.osKernelGetSysTimerCount)
 <LI><a href="#[78]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[79]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[7a]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[7b]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[7c]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[7d]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[7e]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[7f]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[84]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[85]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[86]">svcRtxThreadSuspend</a> from rtx_thread.o(.text.svcRtxThreadSuspend) referenced from rtx_thread.o(.text.osThreadSuspend)
 <LI><a href="#[87]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[88]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[8d]">task1</a> from tasks.o(.text.task1) referenced from timeline.o(.text.timeline_task_thread)
 <LI><a href="#[8e]">task2</a> from tasks.o(.text.task2) referenced from timeline.o(.text.timeline_task_thread)
 <LI><a href="#[8f]">task3</a> from tasks.o(.text.task3) referenced from timeline.o(.text.timeline_task_thread)
 <LI><a href="#[72]">timeline_task_thread</a> from timeline.o(.text.timeline_task_thread) referenced from main.o(.text.app_main_timeline_scheduling)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ee]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ef]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1f0]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1f1]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[1f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[200]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[201]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[202]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[203]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[204]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[205]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[206]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[207]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[208]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[209]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a9]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[20a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[20b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[20c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[20e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[20f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[210]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[98]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[211]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelBeforeInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[a3]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vioInit &rArr; BSP_TSENSOR_Init &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[212]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[bc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a8]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[213]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[aa]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l475xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l475xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[214]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__2snprintf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[9c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[b3]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData (via Veneer)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[b6]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[215]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[216]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelMspInit
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize (via Veneer)
</UL>

<P><STRONG><a name="[217]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[218]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[6e]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a7]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[21e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ab]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[21f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_fp_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_lib.o(.text.$Sub$$_fp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1e3]"></a>BSP_ACCELERO_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l475e_iot01_accelero.o(.text.BSP_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
</UL>

<P><STRONG><a name="[1e2]"></a>BSP_GYRO_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l475e_iot01_gyro.o(.text.BSP_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
</UL>

<P><STRONG><a name="[1e5]"></a>BSP_HSENSOR_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l475e_iot01_hsensor.o(.text.BSP_HSENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HSENSOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
</UL>

<P><STRONG><a name="[be]"></a>BSP_LED_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, stm32l475e_iot01.o(.text.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
</UL>

<P><STRONG><a name="[bf]"></a>BSP_PB_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, stm32l475e_iot01.o(.text.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
</UL>

<P><STRONG><a name="[1e4]"></a>BSP_PSENSOR_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l475e_iot01_psensor.o(.text.BSP_PSENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PSENSOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
</UL>

<P><STRONG><a name="[c2]"></a>BSP_TSENSOR_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l475e_iot01_tsensor.o(.text.BSP_TSENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = BSP_TSENSOR_Init &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
</UL>

<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l4xx_it.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelMspInit
</UL>

<P><STRONG><a name="[c4]"></a>EvrRtxDelay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxDelay &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[c6]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxDelayCompleted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c7]"></a>EvrRtxDelayError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxDelayError &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[c8]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxDelayStarted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[c9]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxEventFlagsWaitTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[ca]"></a>EvrRtxKernelError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxKernelError &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[cb]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[cd]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[ce]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxKernelInitialized &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[cf]"></a>EvrRtxKernelStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxKernelStart &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[d0]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxKernelStarted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[d1]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[d4]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[d5]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[d8]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[d9]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[da]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[db]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[dc]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[dd]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[de]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMessageQueueGet &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[df]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMessageQueueGetPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[e0]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueGetTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[e1]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueInsertPending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[e2]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[e3]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueNotInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[e4]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueNotRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[e5]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMessageQueuePut &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[e6]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxMessageQueuePutPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[e7]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueuePutTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[e8]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[e9]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexAcquire &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[ea]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexAcquirePending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[eb]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexAcquireTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[ec]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexAcquired &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[ed]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[ee]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexDelete &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[ef]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexDestroyed &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[f0]"></a>EvrRtxMutexError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[f1]"></a>EvrRtxMutexNew</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexNew), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexNew &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[f2]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexNotAcquired &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[f3]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexRelease), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexRelease &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[f4]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxMutexReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[f5]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxSemaphoreAcquireTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[f6]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[f7]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[f8]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadDestroyed &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[f9]"></a>EvrRtxThreadError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[fa]"></a>EvrRtxThreadExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadExit &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[fb]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[fc]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadFlagsWaitTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[fd]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadJoined &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[fe]"></a>EvrRtxThreadNew</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[ff]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[100]"></a>EvrRtxThreadSuspend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadSuspend &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[101]"></a>EvrRtxThreadSuspended</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadSuspended &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[102]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadSwitched &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[103]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[104]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxTimerCallback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[105]"></a>EvrRtxTimerCreated</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxTimerCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[106]"></a>EvrRtxTimerError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[107]"></a>EvrRtxTimerNew</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EvrRtxTimerNew &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[108]"></a>EvrRtxTimerStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxTimerStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[109]"></a>EvrRtxTimerStarted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EvrRtxTimerStarted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[10a]"></a>HAL_DFSDM_ChannelInit</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, stm32l4xx_hal_dfsdm.o(.text.HAL_DFSDM_ChannelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HAL_DFSDM_ChannelInit &rArr; HAL_DFSDM_ChannelMspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFSDM_GetChannelFromInstance
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelMspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>HAL_DFSDM_ChannelMspInit</STRONG> (Thumb, 116 bytes, Stack size 168 bytes, stm32l4xx_hal_msp.o(.text.HAL_DFSDM_ChannelMspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_DFSDM_ChannelMspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelInit
</UL>

<P><STRONG><a name="[130]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[110]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_it.o(.text.EXTI9_5_IRQHandler)
</UL>
<P><STRONG><a name="[74]"></a>HAL_GPIO_Init</STRONG> (Thumb, 376 bytes, Stack size 44 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelMspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[73]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[13d]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_42
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[111]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[116]"></a>HAL_I2C_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_90
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_54
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_62
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_42
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_66
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_74
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_53
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_37
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_36
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[12b]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_54
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_62
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_42
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_63
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_66
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_74
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_53
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>

<P><STRONG><a name="[115]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(.text.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[118]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 112 bytes, Stack size 168 bytes, stm32l4xx_hal_msp.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32l4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[132]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[195]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[198]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[136]"></a>HAL_QSPI_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(.text.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(.text.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 764 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelMspInit
</UL>

<P><STRONG><a name="[142]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[146]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[148]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[144]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[149]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1232 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14e]"></a>HAL_SPI_Init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[150]"></a>HAL_UART_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>HAL_UART_MspInit</STRONG> (Thumb, 188 bytes, Stack size 168 bytes, stm32l4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[0]"></a>HTS221_H_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Init &rArr; OUTLINED_FUNCTION_2 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_H_Drv)
</UL>
<P><STRONG><a name="[2]"></a>HTS221_H_ReadHumidity</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, hts221.o(.text.HTS221_H_ReadHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTS221_H_ReadHumidity
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_H_Drv)
</UL>
<P><STRONG><a name="[1]"></a>HTS221_H_ReadID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_H_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HTS221_H_ReadID &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_H_Drv)
</UL>
<P><STRONG><a name="[3]"></a>HTS221_T_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221.o(.text.HTS221_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Init &rArr; OUTLINED_FUNCTION_2 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_T_Drv)
</UL>
<P><STRONG><a name="[4]"></a>HTS221_T_ReadTemp</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, hts221.o(.text.HTS221_T_ReadTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_ReadTemp &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221.o(.data.HTS221_T_Drv)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>LPS22HB_P_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb.o(.text.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Init &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data.LPS22HB_P_Drv)
</UL>
<P><STRONG><a name="[6]"></a>LPS22HB_P_ReadID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb.o(.text.LPS22HB_P_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = LPS22HB_P_ReadID &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data.LPS22HB_P_Drv)
</UL>
<P><STRONG><a name="[7]"></a>LPS22HB_P_ReadPressure</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lps22hb.o(.text.LPS22HB_P_ReadPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_P_ReadPressure &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb.o(.data.LPS22HB_P_Drv)
</UL>
<P><STRONG><a name="[9]"></a>LSM6DSL_AccDeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_AccDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_AccDeInit &rArr; OUTLINED_FUNCTION_0 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslAccDrv)
</UL>
<P><STRONG><a name="[8]"></a>LSM6DSL_AccInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_AccInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_AccInit &rArr; OUTLINED_FUNCTION_4 &rArr; SENSOR_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslAccDrv)
</UL>
<P><STRONG><a name="[b]"></a>LSM6DSL_AccLowPower</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_AccLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_AccLowPower &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslAccDrv)
</UL>
<P><STRONG><a name="[a]"></a>LSM6DSL_AccReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_AccReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = LSM6DSL_AccReadID &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslAccDrv)
</UL>
<P><STRONG><a name="[c]"></a>LSM6DSL_AccReadXYZ</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lsm6dsl.o(.text.LSM6DSL_AccReadXYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_AccReadXYZ &rArr; OUTLINED_FUNCTION_0 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslAccDrv)
</UL>
<P><STRONG><a name="[e]"></a>LSM6DSL_GyroDeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_GyroDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_GyroDeInit &rArr; OUTLINED_FUNCTION_1 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslGyroDrv)
</UL>
<P><STRONG><a name="[d]"></a>LSM6DSL_GyroInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_GyroInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_GyroInit &rArr; OUTLINED_FUNCTION_1 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslGyroDrv)
</UL>
<P><STRONG><a name="[10]"></a>LSM6DSL_GyroLowPower</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_GyroLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_GyroLowPower &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslGyroDrv)
</UL>
<P><STRONG><a name="[f]"></a>LSM6DSL_GyroReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl.o(.text.LSM6DSL_GyroReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = LSM6DSL_GyroReadID &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslGyroDrv)
</UL>
<P><STRONG><a name="[11]"></a>LSM6DSL_GyroReadXYZAngRate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lsm6dsl.o(.text.LSM6DSL_GyroReadXYZAngRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_GyroReadXYZAngRate &rArr; OUTLINED_FUNCTION_1 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl.o(.data.Lsm6dslGyroDrv)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[1d0]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1db]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d6]"></a>OS_Tick_GetCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[1da]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d8]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[1d7]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetOverflow))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[1d9]"></a>OS_Tick_Setup</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[c3]"></a>SENSOR_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l475e_iot01.o(.text.SENSOR_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroReadID
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccReadID
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_ReadID
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_ReadID
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TSENSOR_Init
</UL>

<P><STRONG><a name="[15c]"></a>SENSOR_IO_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l475e_iot01.o(.text.SENSOR_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroLowPower
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroReadID
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccLowPower
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccReadID
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_ReadPressure
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_ReadID
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_ReadTemp
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_ReadID
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[71]"></a>SENSOR_IO_ReadMultiple</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l475e_iot01.o(.text.SENSOR_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SENSOR_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroReadXYZAngRate
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccReadXYZ
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hts221.o(.text.HTS221_H_ReadHumidity)
<LI> hts221.o(.text.HTS221_T_ReadTemp)
</UL>
<P><STRONG><a name="[15a]"></a>SENSOR_IO_Write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l475e_iot01.o(.text.SENSOR_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SENSOR_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroLowPower
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroDeInit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccLowPower
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccDeInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[196]"></a>SystemClock_Config</STRONG> (Thumb, 136 bytes, Stack size 104 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, system_stm32l4xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_stm32l4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(.text)
</UL>
<P><STRONG><a name="[187]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
</UL>

<P><STRONG><a name="[156]"></a>UART_CheckIdleState</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; OUTLINED_FUNCTION_17 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[178]"></a>UART_SetConfig</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[183]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>

<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l475xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; OUTLINED_FUNCTION_1 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[96]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _mutex_free &rArr; osMutexDelete &rArr; OUTLINED_FUNCTION_1 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[93]"></a>_mutex_initialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[95]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; OUTLINED_FUNCTION_1 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[a2]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelBeforeInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[1a2]"></a>app_error_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, faults.o(.text.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = app_error_handler &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_timeline_scheduling
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeline_task_thread
</UL>

<P><STRONG><a name="[1a4]"></a>app_main_timeline_scheduling</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.app_main_timeline_scheduling))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = app_main_timeline_scheduling &rArr; app_error_handler &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>busy_wait_ms</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, helpers.o(.text.busy_wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = busy_wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[a6]"></a>main</STRONG> (Thumb, 988 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main &rArr; vioInit &rArr; BSP_TSENSOR_Init &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vioInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_timeline_scheduling
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ac]"></a>osDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osDelay &rArr; EvrRtxDelayError &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeline_task_thread
</UL>

<P><STRONG><a name="[1b7]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelBeforeInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerIsRunning (via Veneer)
</UL>

<P><STRONG><a name="[1ad]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount (via Veneer)
</UL>

<P><STRONG><a name="[1a1]"></a>osKernelInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; osRtxKernelBeforeInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelBeforeInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[1ab]"></a>osKernelStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osKernelStart &rArr; OUTLINED_FUNCTION_2 &rArr; EvrRtxKernelError &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>osMessageQueueGet</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[1b4]"></a>osMessageQueuePut</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[19d]"></a>osMutexAcquire</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexAcquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osMutexAcquire &rArr; OUTLINED_FUNCTION_1 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[19e]"></a>osMutexDelete</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osMutexDelete &rArr; OUTLINED_FUNCTION_1 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[19f]"></a>osMutexNew</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexNew), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexNew &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[1a0]"></a>osMutexRelease</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexRelease), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osMutexRelease &rArr; OUTLINED_FUNCTION_1 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[1b6]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[82]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[1ae]"></a>osRtxKernelBeforeInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, rtx_lib.o(.text.osRtxKernelBeforeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = osRtxKernelBeforeInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[ad]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1b9]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[1ba]"></a>osRtxMemoryFree</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[89]"></a>osRtxMemoryInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[1b5]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[1bb]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[172]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1bf]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[1c1]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1c2]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[ae]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>osRtxPostProcess</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[1ca]"></a>osRtxThreadBeforeFree</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_lib.o(.text.osRtxThreadBeforeFree))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[180]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[1c6]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxEventFlagsWaitTimeout &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1c8]"></a>osRtxThreadDestroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[1c4]"></a>osRtxThreadDispatch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[1cb]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[18b]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1cc]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[17f]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1c3]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1c7]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[1bd]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[ac]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[1cd]"></a>osRtxThreadStartup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[18d]"></a>osRtxThreadSwitch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1ce]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = osRtxThreadWaitEnter &rArr; OUTLINED_FUNCTION_6 &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[17b]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[af]"></a>osRtxTick_Handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[92]"></a>osRtxTimerSetup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[91]"></a>osRtxTimerThread</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[1d2]"></a>osThreadExit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEntry
</UL>

<P><STRONG><a name="[1a5]"></a>osThreadNew</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_timeline_scheduling
</UL>

<P><STRONG><a name="[1d3]"></a>osThreadSuspend</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osThreadSuspend &rArr; OUTLINED_FUNCTION_1 &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeline_task_thread
</UL>

<P><STRONG><a name="[1d5]"></a>osTimerNew</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osTimerNew &rArr; EvrRtxTimerNew &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeline_task_thread
</UL>

<P><STRONG><a name="[90]"></a>osTimerStart</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osTimerStart &rArr; EvrRtxTimerStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeline.o(.text.timeline_task_thread)
</UL>
<P><STRONG><a name="[8d]"></a>task1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task1 &rArr; busy_wait_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wait_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeline.o(.text.timeline_task_thread)
</UL>
<P><STRONG><a name="[8e]"></a>task2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task2 &rArr; busy_wait_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wait_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeline.o(.text.timeline_task_thread)
</UL>
<P><STRONG><a name="[8f]"></a>task3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text.task3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task3 &rArr; busy_wait_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wait_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeline.o(.text.timeline_task_thread)
</UL>
<P><STRONG><a name="[72]"></a>timeline_task_thread</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, timeline.o(.text.timeline_task_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = timeline_task_thread &rArr; app_error_handler &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main_timeline_scheduling)
</UL>
<P><STRONG><a name="[1aa]"></a>vioInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, vio_bl475eiot01a.o(.text.vioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = vioInit &rArr; BSP_TSENSOR_Init &rArr; SENSOR_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HSENSOR_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PSENSOR_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TSENSOR_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bd]"></a>$Super$$_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[222]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[223]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[cc]"></a>EventRecord2</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0 (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError (via Veneer)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc (via Veneer)
</UL>

<P><STRONG><a name="[d7]"></a>EventRecord4</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2 (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit (via Veneer)
</UL>

<P><STRONG><a name="[1a6]"></a>EventRecordData</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, eventrecorder.o(.text.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handler (via Veneer)
</UL>

<P><STRONG><a name="[81]"></a>EventRecorderDisable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventRecorderDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.text.osRtxKernelBeforeInit)
</UL>
<P><STRONG><a name="[80]"></a>EventRecorderEnable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> eventrecorder.o(.text.EventRecorderInitialize)
<LI> rtx_lib.o(.text.osRtxKernelBeforeInit)
</UL>
<P><STRONG><a name="[1b8]"></a>EventRecorderInitialize</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8 (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelBeforeInit (via Veneer)
</UL>

<P><STRONG><a name="[1ec]"></a>EventRecorderStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1e7]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EventRecorderTimerGetCount &rArr; osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount (via Veneer)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerIsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[1eb]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a3]"></a>error_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, faults.o(.text.error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = error_handler &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>

<P><STRONG><a name="[1a8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>I2Cx_Init</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, stm32l475e_iot01.o(.text.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Init
</UL>

<P><STRONG><a name="[16a]"></a>I2Cx_WriteMultiple</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, stm32l475e_iot01.o(.text.I2Cx_WriteMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>

<P><STRONG><a name="[169]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l475e_iot01.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>

<P><STRONG><a name="[166]"></a>I2Cx_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l475e_iot01.o(.text.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2Cx_Error &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>

<P><STRONG><a name="[168]"></a>I2Cx_ReadMultiple</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, stm32l475e_iot01.o(.text.I2Cx_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_ReadMultiple
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
</UL>

<P><STRONG><a name="[158]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hts221.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[159]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hts221.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[15b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hts221.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_ReadTemp
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_ReadHumidity
</UL>

<P><STRONG><a name="[16b]"></a>LPS22HB_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lps22hb.o(.text.LPS22HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Init &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
</UL>

<P><STRONG><a name="[16c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dsl.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccReadXYZ
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccDeInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccInit
</UL>

<P><STRONG><a name="[16d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsl.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; SENSOR_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccInit
</UL>

<P><STRONG><a name="[16e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lsm6dsl.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccInit
</UL>

<P><STRONG><a name="[16f]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lsm6dsl.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroReadXYZAngRate
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_AccReadXYZ
</UL>

<P><STRONG><a name="[170]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dsl.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; SENSOR_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroReadXYZAngRate
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroDeInit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_GyroInit
</UL>

<P><STRONG><a name="[75]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; OUTLINED_FUNCTION_6 &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[d6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_evr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>

<P><STRONG><a name="[d2]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>

<P><STRONG><a name="[d3]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_evr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>

<P><STRONG><a name="[c5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_evr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspended
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>

<P><STRONG><a name="[184]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; EvrRtxKernelError &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1af]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[78]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[76]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxKernelStart</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[179]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; EvrRtxKernelError &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[77]"></a>svcRtxKernelGetSysTimerCount</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetSysTimerCount)
</UL>
<P><STRONG><a name="[171]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[19c]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(.text.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[1c0]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[8a]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[188]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[7b]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[1b1]"></a>MessageQueueGet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[7a]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[1bc]"></a>MessageQueueRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[17a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1be]"></a>MessageQueuePut</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[185]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; EvrRtxMessageQueueInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[18a]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[173]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[7e]"></a>svcRtxMutexNew</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[17c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_1), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[7c]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; OUTLINED_FUNCTION_6 &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxMutexRelease</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxMutexDelete</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[174]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[186]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_mutex.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[18e]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[18f]"></a>osRtxThreadListRoot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[1c5]"></a>osRtxThreadBlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[1cf]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[18c]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[1c9]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBeforeFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[85]"></a>svcRtxThreadNew</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[8b]"></a>osThreadEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = osThreadEntry &rArr; osThreadExit &rArr; EvrRtxThreadExit &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[8c]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[175]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[176]"></a>IsIrqMasked</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[17d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[1d4]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[86]"></a>svcRtxThreadSuspend</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = svcRtxThreadSuspend &rArr; OUTLINED_FUNCTION_6 &rArr; osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspended
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadSuspend)
</UL>
<P><STRONG><a name="[84]"></a>svcRtxThreadExit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[191]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[192]"></a>ThreadFlagsCheck</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[1de]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[1dd]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[17e]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_10
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[181]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[83]"></a>osRtxTimerTick</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[1d1]"></a>TimerInsert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[87]"></a>svcRtxTimerNew</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; OUTLINED_FUNCTION_2 &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[177]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_timer.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; EvrRtxTimerError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[88]"></a>svcRtxTimerStart</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = svcRtxTimerStart &rArr; EvrRtxTimerStarted &rArr; OUTLINED_FUNCTION_0 &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[1df]"></a>TimerRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[1e0]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_timer.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[1ed]"></a>SysTimerIsRunning</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eventrecorder.o(.text.SysTimerIsRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimerIsRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>

<P><STRONG><a name="[1e6]"></a>EventGetTS</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EventGetTS &rArr; EventRecorderTimerGetCount &rArr; osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[1e9]"></a>EventRecordItem</STRONG> (Thumb, 248 bytes, Stack size 44 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[1e8]"></a>EventCheckFilter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>

<P><STRONG><a name="[10b]"></a>DFSDM_GetChannelFromInstance</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_dfsdm.o(.text.DFSDM_GetChannelFromInstance))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DFSDM_ChannelInit
</UL>

<P><STRONG><a name="[117]"></a>OUTLINED_FUNCTION_90</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_90))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[11a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[11b]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[11e]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[121]"></a>OUTLINED_FUNCTION_36</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_36))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[122]"></a>OUTLINED_FUNCTION_37</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_37))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[123]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>

<P><STRONG><a name="[12e]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_55
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_56
</UL>

<P><STRONG><a name="[12f]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[124]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_27 &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[126]"></a>OUTLINED_FUNCTION_53</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_53))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[129]"></a>OUTLINED_FUNCTION_74</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_74))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_74 &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[163]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[165]"></a>OUTLINED_FUNCTION_46</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_46))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>

<P><STRONG><a name="[15f]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>

<P><STRONG><a name="[164]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_74
</UL>

<P><STRONG><a name="[125]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[11c]"></a>OUTLINED_FUNCTION_66</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_66))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[15e]"></a>OUTLINED_FUNCTION_45</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_45))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[12d]"></a>OUTLINED_FUNCTION_63</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_63))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[160]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; I2C_TransferConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[11d]"></a>OUTLINED_FUNCTION_42</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_42))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[11f]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[12c]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryWrite &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_55
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_56
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[127]"></a>OUTLINED_FUNCTION_62</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_62))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[128]"></a>OUTLINED_FUNCTION_54</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_54))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[12a]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[161]"></a>OUTLINED_FUNCTION_56</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_56))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_56 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[162]"></a>OUTLINED_FUNCTION_55</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.OUTLINED_FUNCTION_55))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[120]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead &rArr; OUTLINED_FUNCTION_55 &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; OUTLINED_FUNCTION_46 &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_55
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_56
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[189]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
</UL>

<P><STRONG><a name="[15d]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_46
</UL>

<P><STRONG><a name="[112]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>

<P><STRONG><a name="[137]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_qspi.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[138]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_qspi.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[13a]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32l4xx_hal_qspi.o(.text.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[143]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[14a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[14b]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[14c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[14d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[145]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[147]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[13b]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[13c]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[13e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[13f]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[140]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[141]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[193]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>

<P><STRONG><a name="[194]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>

<P><STRONG><a name="[190]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>

<P><STRONG><a name="[151]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[152]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[153]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_25 &rArr; UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[154]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[155]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[182]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_17 &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[19b]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[6f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
